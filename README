IRC Chat Client using SSL encryption that connects to local irc server
-I was very unfamiliar with encryption and networking/irc protocol so this proved to be a big challenge for me and there are a few bugs in the way that I set up the framework however the fundamental features work and provide SSL_v23 encrypted connection to the server and more professional clients successfully interact with this homemade client.

	

Useful Commands:
-------------------------------------------------------------------------------------------------------------------
/message
to send a message on the channel that you are connected to. Use the form /message <your text here>

/join 
to join another premade channel use the form /join #<channel name>

/part
to leave the current channel that you are on use the form /part #<channel name>

/author
to send your current nickname to the channel use the form /author


/exit
to exit client use the form /exit

-------------------------------------------------------------------------------------------------------------------


ISSUES TO NOTE: the read buffer is a bit buggy so before any messages can be sent, the buffer must be flushed by inputing a few commands. Using
3 /message commands or 3 /author commands in a row will flush the initial bloat of connecting to the server from the buffer. Afterwards messages must be sent in a round robin fashion alternating between someone else on the channel and yourself. I believe this is an issue with the way I am using the socket.recv buffer.


-------------------------------------------------------------------------------------------------------------------

DEPENDENCIES: make, gcc, build-essential, openssl, libcurl4-openssl-dev, zlib1g, zlib1g-dev, zlibc, libgcrypt11, and libgcrypt11-dev, unrealircd server, and an irc client to talk to this client (I used xchat)


--------------------------------------------------------------------------------------------------------------------

INSTALLATION INSTRUCTIONS: 
The proper and necessary unrealircd.conf, server.cert.pem, server.key.pem, server.req.pem, ircd.motd.fr, ircd.rules.fr, server.crt, server.csr, and server.key files are included.


1. Firt create a directory to hold the client and the certificate/key used by it and a second directory to hold Unrealircd server.


2. First must install Unrealircd server in one directory:
	1. wget http://unrealircd.com/downloads/Unreal3.2.8.1.tar.gz
	2. tar xfz Unreal3.2.8.1.tar.gz
	3. cd into Unreal directory
	4. ./Config   -> It is okay to press enter throughout the config except for when it asks if you want to support SSL connections. type in 'yes' for this
	5. By selecting 'yes' for ssl it will ask for information to create your own certificate.
	6. Once the configuration is finished you can copy [unrealircd.conf, server.cert.pem, server.key.pem, server.req.pem, ircd.motd.fr, ircd.rules.fr] files into the main Unreal3.2.8.1 directory. This will replace the autogenerated configuration with one that will work with the client
	7. Now do a Make in the Unreal directory
	8. Once Make is finished, you can start the server with ./unreal start


3. In the directory that holds the cs460.py file, make sure the files [server.crt, server.csr, server.key]
	-The Client uses self signed certificate/privatekey to connect to an unrealircd server that will accept ssl connections on one port.
	 I am not sure if the certificate/key will work once they are put on another machine but if they do not, it is an easy process to make new 		 certificate on the testing machine.
	-If issues arise with this, run these commands in the directory that holds the client.
		-openssl genrsa -des3 -out server.orig.key 2048
		 openssl rsa -in server.orig.key -out server.key
		 openssl req -new -key server.key -out server.csr
		 openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
	-Now copy/replace the server.crt from client directory into server.cert.pem in Unreal directory and server.key into server.key.pem in the Unreal directory


4. The client is now ready to be used but a second client should be connected to the server as well to demonstrate that messages are in fact being sent and received. I used xchat for this


5. To install xchat on an ubuntu device do apt-get install xchat


6. Input some user information on xchat and join the server 127.0.0.1/6697
	-6697 is the port configured to listen to SSL connections using my unrealircd.conf
	-xchat has to be set to use ssl for the server and to accept invalid ssl certificates (since mine is self signed)


7. Installation complete, you can run the client with ./cs460Client.py
